/** Declaration file generated by dts-gen */
// tslint:disable:max-classes-per-file
// tslint:disable:class-name
declare module 'vue-loading-overlay' {
    export const components: {
        Bars: {
            name: string;
            props: {
                color: {
                    default: string;
                    type: any;
                };
                height: {
                    default: number;
                    type: any;
                };
                width: {
                    default: number;
                    type: any;
                };
            };
            render: any;
            staticRenderFns: any[];
        };
        Dots: {
            name: string;
            props: {
                color: {
                    default: string;
                    type: any;
                };
                height: {
                    default: number;
                    type: any;
                };
                width: {
                    default: number;
                    type: any;
                };
            };
            render: any;
            staticRenderFns: any[];
        };
        Spinner: {
            name: string;
            props: {
                color: {
                    default: string;
                    type: any;
                };
                height: {
                    default: number;
                    type: any;
                };
                width: {
                    default: number;
                    type: any;
                };
            };
            render: any;
            staticRenderFns: any[];
        };
    };

    export const mixins: Array<{
        beforeDestroy: any;
        methods: {
            focusIn: any;
        };
        mounted: any;
    }>;

    export const name: string;

    export const staticRenderFns: any[];

    export function beforeDestroy(): void;

    export function beforeMount(): void;

    export function data(): any;

    export function install(Vue: any, ...args: any[]): void;

    export function mounted(): void;

    export function render(): any;

    export namespace methods {
        function cancel(...args: any[]): void;

        function hide(): void;

        function keyPress(event: any): void;

    }

    export namespace props {
        // tslint:disable-next-line:class-name
        class active {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            public toString(): any;

            // Native method; no parameter or return type inference available
            public valueOf(): any;

        }
        class backgroundColor {

            public static fromCharCode(p0: any): any;

            public static fromCodePoint(p0: any): any;

            public static raw(p0: any): any;
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            public anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            public big(): any;

            // Native method; no parameter or return type inference available
            public blink(): any;

            // Native method; no parameter or return type inference available
            public bold(): any;

            // Native method; no parameter or return type inference available
            public charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            public charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            public codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            public concat(p0: any): any;

            // Native method; no parameter or return type inference available
            public endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            public fixed(): any;

            // Native method; no parameter or return type inference available
            public fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            public fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            public includes(p0: any): any;

            // Native method; no parameter or return type inference available
            public indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            public italics(): any;

            // Native method; no parameter or return type inference available
            public lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            public link(p0: any): any;

            // Native method; no parameter or return type inference available
            public localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            public match(p0: any): any;

            // Native method; no parameter or return type inference available
            public matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            public normalize(): any;

            // Native method; no parameter or return type inference available
            public padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            public padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            public repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            public replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            public search(p0: any): any;

            // Native method; no parameter or return type inference available
            public slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            public small(): any;

            // Native method; no parameter or return type inference available
            public split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            public startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            public strike(): any;

            // Native method; no parameter or return type inference available
            public sub(): any;

            // Native method; no parameter or return type inference available
            public substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            public substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            public sup(): any;

            // Native method; no parameter or return type inference available
            public toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            public toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            public toLowerCase(): any;

            // Native method; no parameter or return type inference available
            public toString(): any;

            // Native method; no parameter or return type inference available
            public toUpperCase(): any;

            // Native method; no parameter or return type inference available
            public trim(): any;

            // Native method; no parameter or return type inference available
            public trimEnd(): any;

            // Native method; no parameter or return type inference available
            public trimLeft(): any;

            // Native method; no parameter or return type inference available
            public trimRight(): any;

            // Native method; no parameter or return type inference available
            public trimStart(): any;

            // Native method; no parameter or return type inference available
            public valueOf(): any;

        }


        class canCancel {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            public toString(): any;

            // Native method; no parameter or return type inference available
            public valueOf(): any;

        }

        class color {

            public static fromCharCode(p0: any): any;

            public static fromCodePoint(p0: any): any;

            public static raw(p0: any): any;
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            public anchor(p0: any): any;

            // Native method; no parameter or return type inference available
            public big(): any;

            // Native method; no parameter or return type inference available
            public blink(): any;

            // Native method; no parameter or return type inference available
            public bold(): any;

            // Native method; no parameter or return type inference available
            public charAt(p0: any): any;

            // Native method; no parameter or return type inference available
            public charCodeAt(p0: any): any;

            // Native method; no parameter or return type inference available
            public codePointAt(p0: any): any;

            // Native method; no parameter or return type inference available
            public concat(p0: any): any;

            // Native method; no parameter or return type inference available
            public endsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            public fixed(): any;

            // Native method; no parameter or return type inference available
            public fontcolor(p0: any): any;

            // Native method; no parameter or return type inference available
            public fontsize(p0: any): any;

            // Native method; no parameter or return type inference available
            public includes(p0: any): any;

            // Native method; no parameter or return type inference available
            public indexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            public italics(): any;

            // Native method; no parameter or return type inference available
            public lastIndexOf(p0: any): any;

            // Native method; no parameter or return type inference available
            public link(p0: any): any;

            // Native method; no parameter or return type inference available
            public localeCompare(p0: any): any;

            // Native method; no parameter or return type inference available
            public match(p0: any): any;

            // Native method; no parameter or return type inference available
            public matchAll(p0: any): any;

            // Native method; no parameter or return type inference available
            public normalize(): any;

            // Native method; no parameter or return type inference available
            public padEnd(p0: any): any;

            // Native method; no parameter or return type inference available
            public padStart(p0: any): any;

            // Native method; no parameter or return type inference available
            public repeat(p0: any): any;

            // Native method; no parameter or return type inference available
            public replace(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            public search(p0: any): any;

            // Native method; no parameter or return type inference available
            public slice(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            public small(): any;

            // Native method; no parameter or return type inference available
            public split(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            public startsWith(p0: any): any;

            // Native method; no parameter or return type inference available
            public strike(): any;

            // Native method; no parameter or return type inference available
            public sub(): any;

            // Native method; no parameter or return type inference available
            public substr(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            public substring(p0: any, p1: any): any;

            // Native method; no parameter or return type inference available
            public sup(): any;

            // Native method; no parameter or return type inference available
            public toLocaleLowerCase(): any;

            // Native method; no parameter or return type inference available
            public toLocaleUpperCase(): any;

            // Native method; no parameter or return type inference available
            public toLowerCase(): any;

            // Native method; no parameter or return type inference available
            public toString(): any;

            // Native method; no parameter or return type inference available
            public toUpperCase(): any;

            // Native method; no parameter or return type inference available
            public trim(): any;

            // Native method; no parameter or return type inference available
            public trimEnd(): any;

            // Native method; no parameter or return type inference available
            public trimLeft(): any;

            // Native method; no parameter or return type inference available
            public trimRight(): any;

            // Native method; no parameter or return type inference available
            public trimStart(): any;

            // Native method; no parameter or return type inference available
            public valueOf(): any;

        }

        class height {

            public static EPSILON: number;

            public static MAX_SAFE_INTEGER: number;

            public static MAX_VALUE: number;

            public static MIN_SAFE_INTEGER: number;

            public static MIN_VALUE: number;

            public static NEGATIVE_INFINITY: number;

            public static NaN: number;

            public static POSITIVE_INFINITY: number;

            public static isFinite(p0: any): any;

            public static isInteger(p0: any): any;

            public static isNaN(p0: any): any;

            public static isSafeInteger(p0: any): any;

            public static parseFloat(p0: any): any;

            public static parseInt(p0: any, p1: any): any;
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            public toExponential(p0: any): any;

            // Native method; no parameter or return type inference available
            public toFixed(p0: any): any;

            // Native method; no parameter or return type inference available
            public toLocaleString(): any;

            // Native method; no parameter or return type inference available
            public toPrecision(p0: any): any;

            // Native method; no parameter or return type inference available
            public toString(p0: any): any;

            // Native method; no parameter or return type inference available
            public valueOf(): any;

        }

        class opacity {

            public static EPSILON: number;

            public static MAX_SAFE_INTEGER: number;

            public static MAX_VALUE: number;

            public static MIN_SAFE_INTEGER: number;

            public static MIN_VALUE: number;

            public static NEGATIVE_INFINITY: number;

            public static NaN: number;

            public static POSITIVE_INFINITY: number;

            public static isFinite(p0: any): any;

            public static isInteger(p0: any): any;

            public static isNaN(p0: any): any;

            public static isSafeInteger(p0: any): any;

            public static parseFloat(p0: any): any;

            public static parseInt(p0: any, p1: any): any;
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            public toExponential(p0: any): any;

            // Native method; no parameter or return type inference available
            public toFixed(p0: any): any;

            // Native method; no parameter or return type inference available
            public toLocaleString(): any;

            // Native method; no parameter or return type inference available
            public toPrecision(p0: any): any;

            // Native method; no parameter or return type inference available
            public toString(p0: any): any;

            // Native method; no parameter or return type inference available
            public valueOf(): any;

        }

        class programmatic {
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            public toString(): any;

            // Native method; no parameter or return type inference available
            public valueOf(): any;

        }

        class width {

            public static EPSILON: number;

            public static MAX_SAFE_INTEGER: number;

            public static MAX_VALUE: number;

            public static MIN_SAFE_INTEGER: number;

            public static MIN_VALUE: number;

            public static NEGATIVE_INFINITY: number;

            public static NaN: number;

            public static POSITIVE_INFINITY: number;

            public static isFinite(p0: any): any;

            public static isInteger(p0: any): any;

            public static isNaN(p0: any): any;

            public static isSafeInteger(p0: any): any;

            public static parseFloat(p0: any): any;

            public static parseInt(p0: any, p1: any): any;
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            public toExponential(p0: any): any;

            // Native method; no parameter or return type inference available
            public toFixed(p0: any): any;

            // Native method; no parameter or return type inference available
            public toLocaleString(): any;

            // Native method; no parameter or return type inference available
            public toPrecision(p0: any): any;

            // Native method; no parameter or return type inference available
            public toString(p0: any): any;

            // Native method; no parameter or return type inference available
            public valueOf(): any;

        }

        class zIndex {

            public static EPSILON: number;

            public static MAX_SAFE_INTEGER: number;

            public static MAX_VALUE: number;

            public static MIN_SAFE_INTEGER: number;

            public static MIN_VALUE: number;

            public static NEGATIVE_INFINITY: number;

            public static NaN: number;

            public static POSITIVE_INFINITY: number;

            public static isFinite(p0: any): any;

            public static isInteger(p0: any): any;

            public static isNaN(p0: any): any;

            public static isSafeInteger(p0: any): any;

            public static parseFloat(p0: any): any;

            public static parseInt(p0: any, p1: any): any;
            constructor(p0: any);

            // Native method; no parameter or return type inference available
            public toExponential(p0: any): any;

            // Native method; no parameter or return type inference available
            public toFixed(p0: any): any;

            // Native method; no parameter or return type inference available
            public toLocaleString(): any;

            // Native method; no parameter or return type inference available
            public toPrecision(p0: any): any;

            // Native method; no parameter or return type inference available
            public toString(p0: any): any;

            // Native method; no parameter or return type inference available
            public valueOf(): any;

        }

        const container: any[];

        namespace isFullPage {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                public toString(): any;

                // Native method; no parameter or return type inference available
                public valueOf(): any;

            }

        }

        namespace loader {
            class type {

                public static fromCharCode(p0: any): any;

                public static fromCodePoint(p0: any): any;

                public static raw(p0: any): any;
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                public anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                public big(): any;

                // Native method; no parameter or return type inference available
                public blink(): any;

                // Native method; no parameter or return type inference available
                public bold(): any;

                // Native method; no parameter or return type inference available
                public charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                public charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                public codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                public concat(p0: any): any;

                // Native method; no parameter or return type inference available
                public endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                public fixed(): any;

                // Native method; no parameter or return type inference available
                public fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                public fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                public includes(p0: any): any;

                // Native method; no parameter or return type inference available
                public indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                public italics(): any;

                // Native method; no parameter or return type inference available
                public lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                public link(p0: any): any;

                // Native method; no parameter or return type inference available
                public localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                public match(p0: any): any;

                // Native method; no parameter or return type inference available
                public matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                public normalize(): any;

                // Native method; no parameter or return type inference available
                public padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                public padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                public repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                public replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                public search(p0: any): any;

                // Native method; no parameter or return type inference available
                public slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                public small(): any;

                // Native method; no parameter or return type inference available
                public split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                public startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                public strike(): any;

                // Native method; no parameter or return type inference available
                public sub(): any;

                // Native method; no parameter or return type inference available
                public substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                public substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                public sup(): any;

                // Native method; no parameter or return type inference available
                public toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                public toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                public toLowerCase(): any;

                // Native method; no parameter or return type inference available
                public toString(): any;

                // Native method; no parameter or return type inference available
                public toUpperCase(): any;

                // Native method; no parameter or return type inference available
                public trim(): any;

                // Native method; no parameter or return type inference available
                public trimEnd(): any;

                // Native method; no parameter or return type inference available
                public trimLeft(): any;

                // Native method; no parameter or return type inference available
                public trimRight(): any;

                // Native method; no parameter or return type inference available
                public trimStart(): any;

                // Native method; no parameter or return type inference available
                public valueOf(): any;

            }

        }

        namespace onCancel {
            class type {
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                public apply(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                public bind(p0: any): any;

                // Native method; no parameter or return type inference available
                public call(p0: any): any;

                // Native method; no parameter or return type inference available
                public toString(): any;

            }

        }

        namespace transition {
            class type {

                public static fromCharCode(p0: any): any;

                public static fromCodePoint(p0: any): any;

                public static raw(p0: any): any;
                constructor(p0: any);

                // Native method; no parameter or return type inference available
                public anchor(p0: any): any;

                // Native method; no parameter or return type inference available
                public big(): any;

                // Native method; no parameter or return type inference available
                public blink(): any;

                // Native method; no parameter or return type inference available
                public bold(): any;

                // Native method; no parameter or return type inference available
                public charAt(p0: any): any;

                // Native method; no parameter or return type inference available
                public charCodeAt(p0: any): any;

                // Native method; no parameter or return type inference available
                public codePointAt(p0: any): any;

                // Native method; no parameter or return type inference available
                public concat(p0: any): any;

                // Native method; no parameter or return type inference available
                public endsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                public fixed(): any;

                // Native method; no parameter or return type inference available
                public fontcolor(p0: any): any;

                // Native method; no parameter or return type inference available
                public fontsize(p0: any): any;

                // Native method; no parameter or return type inference available
                public includes(p0: any): any;

                // Native method; no parameter or return type inference available
                public indexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                public italics(): any;

                // Native method; no parameter or return type inference available
                public lastIndexOf(p0: any): any;

                // Native method; no parameter or return type inference available
                public link(p0: any): any;

                // Native method; no parameter or return type inference available
                public localeCompare(p0: any): any;

                // Native method; no parameter or return type inference available
                public match(p0: any): any;

                // Native method; no parameter or return type inference available
                public matchAll(p0: any): any;

                // Native method; no parameter or return type inference available
                public normalize(): any;

                // Native method; no parameter or return type inference available
                public padEnd(p0: any): any;

                // Native method; no parameter or return type inference available
                public padStart(p0: any): any;

                // Native method; no parameter or return type inference available
                public repeat(p0: any): any;

                // Native method; no parameter or return type inference available
                public replace(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                public search(p0: any): any;

                // Native method; no parameter or return type inference available
                public slice(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                public small(): any;

                // Native method; no parameter or return type inference available
                public split(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                public startsWith(p0: any): any;

                // Native method; no parameter or return type inference available
                public strike(): any;

                // Native method; no parameter or return type inference available
                public sub(): any;

                // Native method; no parameter or return type inference available
                public substr(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                public substring(p0: any, p1: any): any;

                // Native method; no parameter or return type inference available
                public sup(): any;

                // Native method; no parameter or return type inference available
                public toLocaleLowerCase(): any;

                // Native method; no parameter or return type inference available
                public toLocaleUpperCase(): any;

                // Native method; no parameter or return type inference available
                public toLowerCase(): any;

                // Native method; no parameter or return type inference available
                public toString(): any;

                // Native method; no parameter or return type inference available
                public toUpperCase(): any;

                // Native method; no parameter or return type inference available
                public trim(): any;

                // Native method; no parameter or return type inference available
                public trimEnd(): any;

                // Native method; no parameter or return type inference available
                public trimLeft(): any;

                // Native method; no parameter or return type inference available
                public trimRight(): any;

                // Native method; no parameter or return type inference available
                public trimStart(): any;

                // Native method; no parameter or return type inference available
                public valueOf(): any;

            }

        }

    }

    export namespace watch {
        function active(value: any): void;

    }

}
